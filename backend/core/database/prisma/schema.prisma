// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          BigInt    @id @default(autoincrement())
  name        String
  created_at  DateTime  @default(now())
  modified_at DateTime  @default(now())

  auth        UserAuth?
  assets      UserAssets?
  rooms       Room[]
  fav_rooms   Room[]    @relation("users_favorites_rooms")

  @@map("users")
}

model UserAuth {
  id        BigInt  @id @default(autoincrement())
  email     String  @unique
  password  String

  user_id   BigInt  @unique
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("users_auth")
}

model UserAssets {
  id        BigInt  @id @default(autoincrement())
  avatar    String

  user_id   BigInt  @unique
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("users_assets")
}

model Room {
  id          BigInt        @id @default(autoincrement())
  name        String
  created_at  DateTime      @default(now())
  modified_at DateTime      @default(now())

  auth        RoomAuth?
  settings    RoomSettings?
  owner_id    BigInt
  owner       User          @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  tags        Tag[]
  conferences Conference[]
  subs        User[]        @relation("users_favorites_rooms")

  @@map("rooms")
}

model RoomAuth {
  id            BigInt  @id @default(autoincrement())
  password      String?

  room_id       BigInt  @unique
  room          Room    @relation(fields: [room_id], references: [id], onDelete: Cascade)

  @@map("rooms_auth")
}

model RoomSettings {
  id            BigInt  @id @default(autoincrement())
  visibility    Boolean

  room_id       BigInt  @unique
  room          Room    @relation(fields: [room_id], references: [id], onDelete: Cascade)

  @@map("rooms_settings")
}

model Conference {
  id            String              @id
  name          String
  description   String?
  modified_at   DateTime            @default(now())
  created_at    DateTime            @default(now())

  settings      ConferenceSettings?
  room_id       BigInt              
  room          Room                @relation(fields: [room_id], references: [id], onDelete: Cascade)
  
  @@map("conferences")
}

model ConferenceSettings {
  id            BigInt      @id @default(autoincrement())
  enable_audio  Boolean
  enable_video  Boolean

  conference_id String      @unique
  conference    Conference  @relation(fields: [conference_id], references: [id], onDelete: Cascade)

  @@map("conferences_settings")
}

model Tag {
  id      BigInt @id @default(autoincrement())
  name    String @unique

  rooms   Room[]

  @@map("tags")
}