// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id BigInt @id @default(autoincrement())

  name        String
  created_at  DateTime @default(now())
  modified_at DateTime @default(now())

  auth      UserAuth?
  rooms     Room[]
  fav_rooms Room[]    @relation("users_favorites_rooms")

  @@map("users")
}

model UserAuth {
  id    BigInt @id
  user  User   @relation(fields: [id], references: [id], onDelete: Cascade)

  email    String @unique
  password String

  @@map("users_auth")
}

model Room {
  id String   @id

  name        String
  created_at  DateTime @default(now())
  modified_at DateTime @default(now())

  owner_id    BigInt
  owner       User          @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  auth        RoomAuth?
  settings    RoomSettings?
  conferences Conference[]
  subs        User[]        @relation("users_favorites_rooms")
  tags        Tag[]

  @@map("rooms")
}

model RoomAuth {
  id    String @id
  room  Room   @relation(fields: [id], references: [id], onDelete: Cascade)

  password String?

  @@map("rooms_auth")
}

model RoomSettings {
  id         String   @id
  room       Room     @relation(fields: [id], references: [id], onDelete: Cascade)

  visibility Boolean

  @@map("rooms_settings")
}

model Conference {
  id String @id

  name        String
  description String?
  modified_at DateTime @default(now())
  created_at  DateTime @default(now())

  settings ConferenceSettings?

  room_id  String
  room     Room        @relation(fields: [room_id], references: [id], onDelete: Cascade)
  
  @@map("conferences")
}

model ConferenceSettings {
  id         String     @id
  conference Conference @relation(fields: [id], references: [id], onDelete: Cascade)

  enable_audio Boolean
  enable_video Boolean

  @@map("conferences_settings")
}

model Tag {
  id   BigInt @id @default(autoincrement())
  name String @unique

  rooms Room[]

  @@map("tags")
}
