version: '3.9'
services:
  gateway:
    image: nginx:1.23.2-alpine
    container_name: lineup_dev_gateway
    environment:
      - CLIENT=client:3000
      - AUTH_SERVICE=auth-service:3000
      - ROOM_SERVICE=room-service:3000
      - CHAT_SERVICE=chat-service:3000
      - SIGNAL_SERVICE=signal-service:3000
    volumes:
      - ./backend/gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./backend/gateway/templates:/etc/nginx/templates
    ports:
      - 8080:8080
    depends_on:
      client:
        condition: service_started
      auth-service:
        condition: service_healthy
      room-service:
        condition: service_started
      chat-service: 
        condition: service_started
      signal-service:
        condition: service_started

  client:
    image: node:18.16
    container_name: lineup_dev_client
    command: bash -c "cd /usr/src/app && npm run dev"
    environment:
      - GATEWAY=gateway:8080
    volumes:
      - ./client:/usr/src/app

  auth-service:
    image: node:18.16 
    container_name: lineup_dev_auth-service
    command: bash -c "cd /usr/src/app/services/auth-service && npm run dev"
    environment:
      - PORT=3000
      - environment=development
      - DATABASE_URL=postgresql://admin:mysecretpassword@postgresql:5432/lineup
    volumes:
      - ./backend:/usr/src/app
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://auth-service:3000/services-communication/auth-service/auth/access-token/public-key"]
      interval: 10s
      timeout: 5s
      retries: 5

  room-service:
    image: node:18.16 
    container_name: lineup_dev_room-service
    command: bash -c "cd /usr/src/app/services/room-service && npm run dev"
    environment:
      - PORT=3000
      - environment=development
      - AUTH_SERVICE=auth-service:3000
      - SIGNAL_SERVICE=signal-service:3000
      - DATABASE_URL=postgresql://admin:mysecretpassword@postgresql:5432/lineup
    volumes:
      - ./backend:/usr/src/app
    depends_on:
      postgresql:
        condition: service_healthy
      auth-service:
        condition: service_healthy

  signal-service:
    image: node:18.16
    container_name: lineup_dev_signal-service
    command: bash -c "cd /usr/src/app/services/signal-service && npm run dev"
    environment:
      - PORT=3000
      - environment=development
      - AUTH_SERVICE=auth-service:3000
      - ROOM_SERVICE=room-service:3000
      - CHAT_SERVICE=chat-service:3000
    volumes:
      - ./backend:/usr/src/app
    depends_on:
      auth-service:
        condition: service_healthy

  chat-service:
    image: node:18.16 
    container_name: lineup_dev_chat-service
    command: bash -c "cd /usr/src/app/services/chat-service && npm run dev"
    environment:
      - PORT=3000
      - environment=development
      - AUTH_SERVICE=auth-service:3000
      - CASSANDRA_URL=cassandra
    volumes:
      - ./backend:/usr/src/app
    depends_on:
      cassandra:
        condition: service_healthy
      auth-service:
        condition: service_healthy

  postgresql:
    image: postgres:14.5-alpine
    container_name: lineup_dev_postgresql
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=mysecretpassword
    volumes:
      - ./data/postgresql:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  cassandra:
    image: cassandra:4.1
    container_name: lineup_dev_cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=lineup
    volumes:
      - ./data/cassandra:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster' > /dev/null"]
      interval: 15s
      timeout: 5s
      retries: 10